#!/usr/bin/env python
"""Convert latitude and longtitude bounds to tiles coordinates."""

import argparse

from pyosm.metatile import Metatile
from pyosm.point import latlong_to_zxy, str_to_range, Bound, Bounds
from pyosm.tile import Tile


DEFAULT_BASEDIR = "/var/lib/mod_tile"
DEFAULT_EXT = ".png"
BUFFER_LEN = 1000


class Buffer(object):
    def __init__(self):
        self._buffer = []

    def append(self, i):
        if len(self._buffer) > BUFFER_LEN:
            self._buffer.pop(0)

        self._buffer.append(i)

    def __contains__(self, i):
        return i in self._buffer


def parse_args():
    parser = argparse.ArgumentParser(description=("Convert latitude and longtitude bounds to tiles "
                                                  "coordinates."))
    parser.add_argument("-d", "--basedir", default=DEFAULT_BASEDIR, help="output basedir prefix")
    parser.add_argument("-e", "--ext", default=DEFAULT_EXT, help="output extension")
    parser.add_argument("-m", "--meta", action="store_true", help="convert path to metatile?")
    parser.add_argument("--lng", required=True, type=str, metavar="LNG1[:LNG2]",
                        help="longtitude coordinate (or range LNG1:LNG2)")
    parser.add_argument("--lat", required=True, type=str, metavar="LAT1[:LAT2]",
                        help="latitude coordinate (or range LAT1:LAT2")
    parser.add_argument("--zooms", default="10:10", type=str, metavar="Z1[:Z2]",
                        help="zoom coordinate (or range Z1:Z2)")
    return parser.parse_args()


def main():
    args = parse_args()

    zoom_start, zoom_end = str_to_range(args.zooms, output=int)
    lat_start, lat_end = str_to_range(args.lat)
    lng_start, lng_end = str_to_range(args.lng)

    bounds = Bounds(bounds=[])
    for zoom in range(zoom_start, zoom_end + 1):
        p_start = latlong_to_zxy(lat=lat_start, lng=lng_start, zoom=zoom)
        p_end = latlong_to_zxy(lat=lat_end, lng=lng_end, zoom=zoom)

        bounds.append(Bound(zoom, p_start.x, p_end.x, p_start.y, p_end.y))

    buf = Buffer()

    for point in bounds.points():
        tile = Tile(z=point.z, x=point.x, y=point.y, style="")
        if args.meta:
            metatile = Metatile.from_tile(tile)
            path = metatile.filepath(args.basedir)
            if path in buf:
                continue
            buf.append(path)
        else:
            path = tile.filepath(args.basedir)

        print(path)


if __name__ == "__main__":
    main()
